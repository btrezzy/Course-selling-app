const {Router}=require('express');
const router=Router();
const express=require('express');
const adminMiddleware=require('../middleware/admin')
const app=express();
const { Admin, Course}=require('../db/index');
const moongose=require(moongose);
const jwt=require('jsonwebtoken');
const secret="Niraj";

app.use(express.json());



router.post("/signup",async (req,res)=>{
        const username=req.body.username;
        const password=req.body.password;

        // const existingAdmin=await Admin.findOne({username:username});
        const existingAdmin=await Admin.find(
            {
                username:username

            });

        if(existingAdmin){
            req.json({
                msg:"User exists, kindly sigin-in"
            })
        }
        
        Admin.create({
            username:username,
            password:password
        })

        res.json({
            msg:"Admin created successfully"
        })
})

router.post("/signin",async (req,res)=>{
        const username=req.body.username;
        const password=req.body.password;

        const existingAdmin=await Admin.find(
            {
                username:username,
                password:password
            });

        if(existingAdmin){
             const token=jwt.sign({username:username},secret);
             res.json({
                token:token
             })
        }
        else{
            res.json({
                msg:"Invalid username / password"
            })
        }

})

router.post("/courses",adminMiddleware,async (req,res)=>{
    const title=req.body.title;
    const description=req.body.description;
    const imageLink=req.body.imageLink;
    const price=req.body.price;

    const existingCourse=await Course.find({
        title,
        description,
    })

    if(existingCourse){
        res.json({
            msg:"Course already exits, want to update , hit update endpoint?"
        })
    }
    const newCourse=await Course.create({
        title,
        description,
        imageLink,
        price
    })

    // return the course id generated by monodb
    res.status(404).json({
        msg:"Course added successfully",
        coureId:newCourse._id
    })

})

router.get("/courses",adminMiddleware,async(req,res)=>{

    const allCourses=await Course.find({});

      res.json({
        Courses:allCourses
      })
})

module.exports=router;